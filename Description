Implementation details:
a) common CRUD operation (are available out-of-the-box, via HAL/HATEOAS libraries):
  + get task details	[via HTTP GET using path /tasks/{id}]
  + task creation 		[via HTTP PUT using path /tasks ]
  + task modification   [via HTTP POST or PATCH using path /tasks/{id}]
  + comment addition	[via HTTP PUT using path /comments]
  + comment removal		[via HTTP DELETE]
  
  Should only handle the race conditions (e.g. with the help of optimistic locking)
 
b) custom data retrieval (3-rd party service) can be completed with the help of adding custom interfaces implementing them 
   and autowiring the default implementation inside and exposing it through rest path.
 
c) pagination and sorting is available through JPA repository out-of-the-box


Possible enhancements:
1) Reports generation part of an application obviously requires only the read access, based on that fact we can invole a CQRS pattern
   and implement it as a separate micro-service with a replicated datastore (snapshot),
   maintaining it in a consistent state by listening for the update messages (e.g. with the help of RabbitMQ)
   generated by the service owning the "main" (original) datastore
 
2) Implement an OAuth2 security 

3) The third-party service will be implemented with the help of Hystrix circuit-breaker pattern to allow fallback values to be provided when the service is not responding.
